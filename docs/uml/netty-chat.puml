@startuml
' 序列图示例：消息处理流程

actor Client
participant NettyServer
participant HttpHandler
participant HeartbeatHandler
participant MessageHandler
participant RedisService
participant MessageRepository

Client -> NettyServer : WebSocket连接请求（携带code）
NettyServer -> HttpHandler : 处理HTTP请求
HttpHandler -> HttpHandler : 提取token存入Channel
NettyServer -> HeartbeatHandler : 初始化心跳检测
NettyServer -> MessageHandler : 建立用户连接

Client -> MessageHandler : 发送消息（TextWebSocketFrame）
MessageHandler -> MessageHandler : 消息处理敏感词过滤
MessageHandler -> MessageHandler : sendOrStoreMessage()
alt 用户在线
  MessageHandler -> Client : 转发消息
else 用户离线
  MessageHandler -> RedisService : 存储离线消息
end
MessageHandler -> MessageRepository : 异步保存消息

HeartbeatHandler -> Client : 定期发送Ping
Client -> HeartbeatHandler : 返回Pong
alt 超时未响应
  HeartbeatHandler -> MessageHandler : 清理用户连接
  HeartbeatHandler -> NettyServer : 关闭Channel
end
@enduml