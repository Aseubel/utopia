<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.aseubel.infrastructure.dao.community.DiscussPostMapper">

    <insert id="addDiscussPost">
        insert into `discuss_post` (discuss_post_id, user_id, school_code, title, content, tag)
        values (#{discussPostId}, #{userId}, #{schoolCode}, #{title}, #{content}, #{tag})
    </insert>

    <insert id="relateDiscussPostImage">
        insert `post_image` (post_id, image_id)
        values
        <foreach collection="images" item="image" separator=",">
            (#{postId}, #{image.imageId})
        </foreach>
    </insert>

    <update id="deleteDiscussPostByPostId">
        update `discuss_post`
        set is_deleted = 1
        where discuss_post_id = #{postId} and is_deleted = 0
    </update>

    <update id="updateDiscussPost">
        update `discuss_post`
        set user_id = #{userId}, title = #{title}, content = #{content}, like_count = #{likeCount}, favorite_count = #{favoriteCount}, comment_count=#{comment_count}, type = #{type}, status = #{status}
        where discuss_post_id = #{discussPostId} and is_deleted = 0
    </update>

    <update id="topPost">
        update `discuss_post`
        set type = 1
        where discuss_post_id = #{postId} and is_deleted = 0
    </update>

    <update id="increaseFavoriteCount">
        update `discuss_post`
        set favorite_count = favorite_count + 1
        where discuss_post_id = #{postId} and is_deleted = 0
    </update>

    <update id="decreaseFavoriteCount">
        update `discuss_post`
        set favorite_count = favorite_count - 1
        where discuss_post_id = #{postId} and is_deleted = 0
    </update>

    <update id="increaseCommentCount">
        update `discuss_post`
        set comment_count = comment_count + 1
        where discuss_post_id = #{postId} and is_deleted = 0
    </update>

    <update id="decreaseCommentCount">
        update `discuss_post`
        set comment_count = comment_count - 1
        where discuss_post_id = #{postId} and is_deleted = 0
    </update>

    <update id="increaseLikeCount">
        update `discuss_post`
        set like_count = like_count + 1
        where discuss_post_id = #{postId} and is_deleted = 0
    </update>

    <update id="decreaseLikeCount">
        update `discuss_post`
        set like_count = like_count - 1
        where discuss_post_id = #{postId} and is_deleted = 0
    </update>

    <select id="getDiscussPostByPostId" resultType="com.aseubel.infrastructure.dao.po.DiscussPost">
        select id, discuss_post_id, user_id, school_code, title, content, tag, like_count, favorite_count, comment_count, type, status, create_time, update_time
        from `discuss_post`
        where discuss_post_id = #{postId} and is_deleted = 0
    </select>

    <select id="listDiscussPost" resultType="com.aseubel.infrastructure.dao.po.DiscussPost">
        select id, discuss_post_id, user_id, school_code, title, content, tag, like_count, favorite_count, comment_count, type, status, create_time, update_time
        from `discuss_post`
        <where>
            update_time &lt;= (select update_time from `discuss_post` where discuss_post_id = #{postId} and is_deleted = 0)
            and discuss_post_id != #{postId}
            <if test="schoolCode != null and schoolCode != ''">and school_code = #{schoolCode}</if>
            <if test="tag != null and tag != ''">and tag = #{tag}</if>
            <if test="type != null">and type = #{type}</if>
            <if test="lastUpdateTime != null and postId != null">
                and (update_time &lt; #{lastUpdateTime}
                or (update_time = #{lastUpdateTime} and id &lt; #{postId}))
            </if>
            and is_deleted = 0
        </where>
        order by update_time DESC, id DESC
        limit #{limit}
    </select>

    <select id="listDiscussPostAhead" resultType="com.aseubel.infrastructure.dao.po.DiscussPost">
        select id, discuss_post_id, user_id, school_code, title, content, tag, like_count, favorite_count, comment_count, type, status, create_time, update_time
        from `discuss_post`
        <where>
            <if test="schoolCode != null and schoolCode != ''">and school_code = #{schoolCode}</if>
            <if test="tag != null and tag != ''">and tag = #{tag}</if>
            <if test="type != null">and type = #{type}</if>
            and is_deleted = 0
        </where>
        order by update_time DESC
        limit #{limit}
    </select>

    <select id="listUserDiscussPostId" resultType="java.lang.String">
        select discuss_post_id
        from `discuss_post`
        where id &lt; (select id from `discuss_post` where discuss_post_id = #{postId} and is_deleted = 0)
          and user_id = #{userId} and discuss_post_id != #{postId} and is_deleted = 0
        order by id DESC
        limit #{limit}
    </select>

    <select id="listUserDiscussPostIdAhead" resultType="java.lang.String">
        select discuss_post_id
        from `discuss_post`
        where user_id = #{userId} and is_deleted = 0
        order by id DESC
        limit #{limit}
    </select>

    <select id="getPostFirstImage" resultType="java.lang.String">
        select image_id
        from `post_image`
        where post_id = #{postId} and is_deleted = 0
        limit 1
    </select>

    <select id="listDiscussPostByPostIds" resultType="com.aseubel.infrastructure.dao.po.DiscussPost">
        select discuss_post_id, user_id, school_code, title, content, tag, like_count, favorite_count, comment_count, type, status, create_time, update_time
        from `discuss_post`
        where is_deleted = 0 and discuss_post_id in
        <foreach collection="postIds" item="postId" separator="," open="(" close=")">
            #{postId}
        </foreach>
    </select>

    <select id="listImageUrlByPostId" resultType="java.lang.String">
        select image_url
        from `image` a, `post_image` b
        where a.image_id = b.image_id and b.post_id = #{postId}
          and a.is_deleted = 0 and b.is_deleted = 0
    </select>

    <select id="listPostBase" resultType="com.aseubel.infrastructure.dao.po.DiscussPost">
        SELECT id, discuss_post_id, user_id, title, content, tag, like_count, favorite_count, comment_count, school_code, create_time
        FROM `discuss_post`
        WHERE is_deleted = 0
    </select>

    <select id="listPartialPostBase" resultType="com.aseubel.infrastructure.dao.po.DiscussPost">
        SELECT id, discuss_post_id, user_id, title, content, tag, like_count, favorite_count, comment_count, school_code, create_time
        FROM `discuss_post`
        WHERE is_deleted = 0
        <if test="postId != null">AND id > #{postId}</if>
        limit #{pageSize}
    </select>

    <select id="listUserPostScoreByUserId" resultType="com.aseubel.domain.community.model.vo.Score">
        SELECT
            u.user_id,
            dp.discuss_post_id AS post_id,
            COALESCE(l.like_count, 0) AS like_count,
            COALESCE(f.favorite_count, 0) AS favorite_count,
            COALESCE(c.comment_count, 0) AS comment_count
        FROM
            `user` u
                JOIN `discuss_post` dp ON dp.is_deleted = 0
                LEFT JOIN (
                SELECT
                    user_id,
                    to_id AS discuss_post_id,
                    COUNT(*) AS like_count
                FROM
                    `like`
                WHERE
                    user_id = #{userId} AND status = 1
                GROUP BY
                    user_id,
                    to_id
            ) l ON u.user_id = l.user_id AND dp.discuss_post_id = l.discuss_post_id
                LEFT JOIN (
                SELECT
                    user_id,
                    post_id AS discuss_post_id,
                    COUNT(*) AS favorite_count
                FROM
                    `favorite`
                WHERE
                    user_id = #{userId} AND status = 1
                GROUP BY
                    user_id,
                    post_id
            ) f ON u.user_id = f.user_id AND dp.discuss_post_id = f.discuss_post_id
                LEFT JOIN (
                SELECT
                    user_id,
                    post_id AS discuss_post_id,
                    COUNT(*) AS comment_count
                FROM
                    `comment`
                WHERE
                    user_id = #{userId}
                GROUP BY
                    user_id,
                    post_id
            ) c ON u.user_id = c.user_id AND dp.discuss_post_id = c.discuss_post_id
        WHERE
            COALESCE(l.like_count, 0) > 0
           OR COALESCE(f.favorite_count, 0) > 0
           OR COALESCE(c.comment_count, 0) > 0;
    </select>

    <select id="listUserPostScore" resultType="com.aseubel.domain.community.model.vo.Score">
        SELECT
            u.user_id,
            dp.discuss_post_id AS post_id,
            COALESCE(l.like_count, 0) AS like_count,
            COALESCE(f.favorite_count, 0) AS favorite_count,
            COALESCE(c.comment_count, 0) AS comment_count
        FROM
            `user` u
                JOIN `discuss_post` dp ON dp.is_deleted = 0
                <if test="schoolCode != null and schoolCode != ''">AND dp.school_code = #{schoolCode}</if>
                LEFT JOIN (
                SELECT
                    user_id,
                    to_id AS discuss_post_id,
                    COUNT(*) AS like_count
                FROM
                    `like`
                WHERE
                    status = 1
                GROUP BY
                    user_id,
                    to_id
            ) l ON u.user_id = l.user_id AND dp.discuss_post_id = l.discuss_post_id
                LEFT JOIN (
                SELECT
                    user_id,
                    post_id AS discuss_post_id,
                    COUNT(*) AS favorite_count
                FROM
                    `favorite`
                WHERE
                    status = 1
                GROUP BY
                    user_id,
                    post_id
            ) f ON u.user_id = f.user_id AND dp.discuss_post_id = f.discuss_post_id
                LEFT JOIN (
                SELECT
                    user_id,
                    post_id AS discuss_post_id,
                    COUNT(*) AS comment_count
                FROM
                    `comment`
                GROUP BY
                    user_id,
                    post_id
            ) c ON u.user_id = c.user_id AND dp.discuss_post_id = c.discuss_post_id
        WHERE
            COALESCE(l.like_count, 0) > 0
           OR COALESCE(f.favorite_count, 0) > 0
           OR COALESCE(c.comment_count, 0) > 0;
    </select>

</mapper>