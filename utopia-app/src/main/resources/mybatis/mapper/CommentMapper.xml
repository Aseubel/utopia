<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.aseubel.infrastructure.dao.CommentMapper">

    <insert id="addRootComment">
        insert into `comment` (root_id, comment_id, post_id, user_id, content, update_time)
        values (#{rootId}, #{commentId}, #{postId}, #{userId}, #{content}, #{commentTime})
    </insert>

    <insert id="addChildComment">
        insert into `comment` (root_id, reply_to, comment_id, post_id, user_id, content, update_time)
        values (#{rootId}, #{replyTo}, #{commentId}, #{postId}, #{userId}, #{content}, #{commentTime})
    </insert>

    <insert id="relateCommentImage">
        insert `comment_image` (comment_id, image_id)
        values
        <foreach collection="images" item="image" separator=",">
            (#{commentId}, #{image.imageId})
        </foreach>
    </insert>

    <update id="updateComment">
        update `comment` set content = #{content}, like_count = #{likeCount}, unlike_count = #{unlikeCount}
        where comment_id = #{commentId} and is_deleted = 0
    </update>

    <update id="deleteCommentByCommentId">
        update `comment`
        set is_deleted = 1
        where comment_id = #{commentId} and is_deleted = 0
    </update>

    <update id="increaseLikeCount">
        update `comment`
        set like_count = like_count + 1
        where comment_id = #{commentId} and is_deleted = 0
    </update>

    <update id="decreaseLikeCount">
        update `comment`
        set like_count = like_count - 1
        where comment_id = #{commentId} and is_deleted = 0
    </update>

    <update id="increaseCommentCount">
        update `comment`
        set reply_count = reply_count + 1
        where comment_id = root_id  and comment_id = #{rootId} and is_deleted = 0
    </update>

    <update id="deleteCommentByPostId">
        update `comment`
        set is_deleted = 1
        where post_id = #{postId} and is_deleted = 0
    </update>

    <update id="deleteCommentByRootId">
        update `comment`
        set is_deleted = 1
        where root_id = #{commentId} and is_deleted = 0
    </update>

    <update id="decreaseReplyCount">
        UPDATE comment
        SET reply_count = reply_count - 1
        WHERE root_id = (
            SELECT tmp.root_id FROM (
                                        SELECT root_id FROM comment
                                        WHERE comment_id = #{commentId}
                                    ) AS tmp
        )
          AND root_id = comment_id
          AND is_deleted = 0;

    </update>

    <select id="getCommentByCommentId" resultType="com.aseubel.infrastructure.dao.po.Comment">
        select id, root_id, reply_to, comment_id, post_id, user_id, content, like_count, unlike_count, reply_count, comment_time, update_time
        from `comment`
        where comment_id = #{commentId} and is_deleted = 0
    </select>

    <select id="getUserIdByCommentId" resultType="java.lang.String">
        select user_id
        from `comment`
        where comment_id = #{commentId} and is_deleted = 0
    </select>

    <select id="listCommentsByPostId" resultType="com.aseubel.infrastructure.dao.po.Comment">
        select id, root_id, reply_to, comment_id, post_id, user_id, content, like_count, unlike_count, reply_count, comment_time, update_time
        from `comment`
        where id > (select id from `comment` where comment_id = #{commentId} and is_deleted = 0)
          and is_deleted = 0
        order by id
    </select>

    <select id="listTop3CommentsByPostId" resultType="com.aseubel.infrastructure.dao.po.Comment">
        select id, root_id, reply_to, comment_id, post_id, user_id, content, like_count, unlike_count, comment_time, update_time
        from `comment`
        where post_id = #{postId} and is_deleted = 0
        order by like_count DESC, id
        limit 3
    </select>

    <select id="listCommentsByRootId" resultType="com.aseubel.infrastructure.dao.po.Comment">
        select id, root_id, reply_to, comment_id, post_id, user_id, content, like_count, unlike_count, reply_count, comment_time, update_time
        from `comment`
        where id > (select id from `comment` where comment_id = #{commentId} and is_deleted = 0)
          and root_id = #{rootId} and root_id != comment_id and is_deleted = 0
        order by id
    </select>

    <select id="listTop3CommentsByRootId" resultType="com.aseubel.infrastructure.dao.po.Comment">
        select id, root_id, reply_to, comment_id, post_id, user_id, content, like_count, unlike_count, comment_time, update_time
        from `comment`
        where root_id = #{rootId} and root_id != comment_id and is_deleted = 0
        order by like_count DESC, id
        limit 3
    </select>

    <select id="listCommentByCommentIds" resultType="com.aseubel.infrastructure.dao.po.Comment">
        select id, root_id, reply_to, comment_id, post_id, user_id, content, like_count, unlike_count, comment_time, update_time
        from `comment`
        where comment_id in
        <foreach collection="commentIds" item="commentId" open="(" separator="," close=")">
            #{commentId}
        </foreach> and is_deleted = 0
    </select>

    <select id="listCommentIdAndUserIdByCommentIds" resultType="com.aseubel.infrastructure.dao.po.Comment">
        select comment_id, user_id
        from `comment`
        where comment_id in
        <foreach collection="commentIds" item="commentId" open="(" separator="," close=")">
            #{commentId}
        </foreach> and is_deleted = 0
    </select>

    <select id="listCommentByPostId" resultType="com.aseubel.infrastructure.dao.po.Comment">
        select id, root_id, reply_to, comment_id, post_id, user_id, content, like_count, unlike_count, reply_count, comment_time, update_time
        from `comment`
        where
        <if test="sortType == 0 or sortType == null">id > (select id from `comment` where comment_id = #{commentId} and is_deleted = 0)</if>
        <if test="sortType == 1">id &lt; (select id from `comment` where comment_id = #{commentId} and is_deleted = 0)</if>
        <if test="sortType == 2">like_count &lt;= (select like_count from `comment` where comment_id = #{commentId} and is_deleted = 0)</if>
            and comment_id = root_id
            and post_id = #{postId}
            and is_deleted = 0
        order by
            <if test="sortType == 0 or sortType == null">id</if>
            <if test="sortType == 1">id DESC</if>
            <if test="sortType == 2">like_count DESC, id</if>
        limit #{limit}
    </select>

    <select id="listCommentByPostIdAhead" resultType="com.aseubel.infrastructure.dao.po.Comment">
        select id, root_id, reply_to, comment_id, post_id, user_id, content, like_count, unlike_count, reply_count, comment_time, update_time
        from `comment`
            where comment_id = root_id and post_id = #{postId} and is_deleted = 0
        order by
            <if test="sortType == 0 or sortType == null">id</if>
            <if test="sortType == 1">id DESC</if>
            <if test="sortType == 2">like_count DESC, id</if>
        limit #{limit}
    </select>

    <select id="listImageUrlByCommentId" resultType="java.lang.String">
        select image_url
        from `image` a, `comment_image` b
        where a.image_id = b.image_id and b.comment_id = #{commentId}
          and a.is_deleted = 0 and b.is_deleted = 0
    </select>

    <select id="listSubCommentByRootId" resultType="com.aseubel.infrastructure.dao.po.Comment">
        select id, root_id, reply_to, comment_id, post_id, user_id, content, like_count, unlike_count, reply_count, comment_time, update_time
        from `comment`
        where
        <if test="sortType == 0 or sortType == null">id > (select id from `comment` where comment_id = #{commentId} and is_deleted = 0)</if>
        <if test="sortType == 1">id &lt; (select id from `comment` where comment_id = #{commentId} and is_deleted = 0)</if>
        <if test="sortType == 2">like_count &lt;= (select like_count from `comment` where comment_id = #{commentId} and is_deleted = 0)</if>
            and root_id = #{rootId}
            and root_id != comment_id
            and is_deleted = 0
        order by
        <if test="sortType == 0 or sortType == null">id</if>
        <if test="sortType == 1">id DESC</if>
        <if test="sortType == 2">like_count DESC, id</if>
        limit #{limit}
    </select>

    <select id="listSubCommentByRootIdAhead" resultType="com.aseubel.infrastructure.dao.po.Comment">
        select id, root_id, reply_to, comment_id, post_id, user_id, content, like_count, unlike_count, reply_count, comment_time, update_time
        from `comment`
        where root_id = #{rootId} and root_id != comment_id and is_deleted = 0
        order by
        <if test="sortType == 0 or sortType == null">id</if>
        <if test="sortType == 1">id DESC</if>
        <if test="sortType == 2">like_count DESC, id</if>
        limit #{limit}
    </select>

    <select id="listUserIdsByCommentIds" resultType="java.lang.String">
        select user_id
        from `comment`
        where comment_id in
        <foreach collection="commentIds" item="commentId" open="(" separator="," close=")">
            #{commentId}
        </foreach> and is_deleted = 0
    </select>
    <select id="listCommentIdsByUserIdAndPostId" resultType="java.lang.String">
        select comment_id
        from `comment`
        where user_id = #{userId} and post_id = #{postId} and is_deleted = 0
    </select>

</mapper>