<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.aseubel.infrastructure.dao.CommentMapper">

    <insert id="addRootComment">
        insert into `comment` (root_id, comment_id, post_id, user_id, content)
        values (#{commentId}, #{commentId}, #{postId}, #{userId}, #{content})
    </insert>

    <insert id="addChildComment">
        insert into `comment` (root_id, reply_to, comment_id, post_id, user_id, content)
        values (#{rootId}, #{replyTo}, #{commentId}, #{postId}, #{userId}, #{content})
    </insert>

    <update id="updateComment">
        update `comment` set content = #{content}, like_count = #{likeCount}, unlike_count = #{unlikeCount}
        where comment_id = #{commentId} and is_deleted = 0
    </update>

    <update id="deleteCommentByCommentId">
        update `comment`
        set is_deleted = 1
        where comment_id = #{commentId} and is_deleted = 0
    </update>

    <select id="getCommentByCommentId" resultType="com.aseubel.infrastructure.dao.po.Comment">
        select id, root_id, reply_to, comment_id, post_id, user_id, content, like_count, unlike_count, reply_count, comment_time, update_time
        from `comment`
        where comment_id = #{commentId} and is_deleted = 0
    </select>

    <select id="getUserIdByCommentId" resultType="java.lang.String">
        select user_id
        from `comment`
        where comment_id = #{commentId} and is_deleted = 0
    </select>

    <select id="listCommentsByPostId" resultType="com.aseubel.infrastructure.dao.po.Comment">
        select id, root_id, reply_to, comment_id, post_id, user_id, content, like_count, unlike_count, reply_count, comment_time, update_time
        from `comment`
        where id > (select id from `comment` where comment_id = #{commentId} and is_deleted = 0)
          and is_deleted = 0
        order by id
    </select>

    <select id="listTop3CommentsByPostId" resultType="com.aseubel.infrastructure.dao.po.Comment">
        select id, root_id, reply_to, comment_id, post_id, user_id, content, like_count, unlike_count, comment_time, update_time
        from `comment`
        where post_id = #{postId} and is_deleted = 0
        order by like_count DESC, id
        limit 3
    </select>

    <select id="listCommentsByRootId" resultType="com.aseubel.infrastructure.dao.po.Comment">
        select id, root_id, reply_to, comment_id, post_id, user_id, content, like_count, unlike_count, reply_count, comment_time, update_time
        from `comment`
        where id > (select id from `comment` where comment_id = #{commentId} and is_deleted = 0)
          and is_deleted = 0 and root_id = #{rootId}
        order by id
    </select>

    <select id="listTop3CommentsByRootId" resultType="com.aseubel.infrastructure.dao.po.Comment">
        select id, root_id, reply_to, comment_id, post_id, user_id, content, like_count, unlike_count, comment_time, update_time
        from `comment`
        where root_id = #{rootId} and is_deleted = 0
        order by like_count DESC, id
        limit 3
    </select>

    <select id="listCommentByCommentIds" resultType="com.aseubel.infrastructure.dao.po.Comment">
        select id, root_id, reply_to, comment_id, post_id, user_id, content, like_count, unlike_count, comment_time, update_time
        from `comment`
        where comment_id in
        <foreach collection="commentIds" item="commentId" open="(" separator="," close=")">
            #{commentId}
        </foreach> and is_deleted = 0
    </select>

</mapper>